import mediapipe as mp # ספריה לראיה ממוחשבת  לצורך זיהוי פנים וידיים
import numpy as np # עבודה על מערכים קריטי ללמידת מכונה
import cv2 # ספריית קוד פתוח לזיהוי פנים ועיבוד תמונה
import pandas as pd # עבודה על קבצים קריאה כתיבה וכו
import os# מאפשר ליצור אינטראקציה עם מספר פונקציות של מערכת ההפעלה
from sklearn.model_selection import train_test_split #   אלגורתמים + משמש לבניית מודלים של למידת מכונה
from keras.utils import to_categorical # משמש ללמידה עמוקה ולבניית השכבות במודלים
from scipy import stats # היא ספריית קוד פתוח המשמשת לפתרון בעיות מתמטיות, מדעיות, הנדסיות וטכניות
from matplotlib import pyplot as plt # היא ספרייה מקיפה ליצירת הדמיות סטטיות
from bidi.algorithm import get_display


 # נקודות מפתח באמצעות MP Holistic  

#מודל הולסטי      Mediapipe Holistic הוא אחד מהצינורות המכילים רכיבי פנים, ידיים ותנוחה 
mp_holistic = mp.solutions.holistic
#כלי עזר לציור
mp_drawing = mp.solutions.drawing_utils




def mediapipe_detection(img, mp_holistic):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # המרת צבע BGR 2 RGB
    img.flags.writeable = False# תמונה כבר לא ניתנת לכתיבה
    res = mp_holistic.process(img)# בצע תחזית
    img.flags.writeable = True  # התמונה ניתנת לכתיבה
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)# כיסוי צבע RGB 2 BGR
    return img, res
    
    
    # ציור תנוחות 👌
    
    def holistic_drawing(img, holistic_res):
    # צייר חיבורי פנים
    # mp_drawing.draw_landmarks(img, holistic_res.face_landmarks, mp_holistic.FACEMESH_TESSELATION, 
    #                          mp_drawing.DrawingSpec(color=(80,110,10), thickness=1, circle_radius=1), 
    #                          mp_drawing.DrawingSpec(color=(80,256,120), thickness=1, circle_radius=1)
    #                          ) 
    # צייר חיבורי תנוחה
    mp_drawing.draw_landmarks(img, holistic_res.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
                             mp_drawing.DrawingSpec(color=(200,50,50), thickness=2, circle_radius=4), 
                             mp_drawing.DrawingSpec(color=(200,25,25), thickness=2, circle_radius=2)
                             ) 
       # צייר חיבורים ביד שמאל
    mp_drawing.draw_landmarks(img, holistic_res.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS, 
                             mp_drawing.DrawingSpec(color=(25,25,200), thickness=2, circle_radius=4), 
                             mp_drawing.DrawingSpec(color=(50,50,200), thickness=2, circle_radius=2)
                             ) 
     # צייר חיבורים ביד ימין
    mp_drawing.draw_landmarks(img, holistic_res.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS, 
                             mp_drawing.DrawingSpec(color=(25,25,200), thickness=2, circle_radius=4), 
                             mp_drawing.DrawingSpec(color=(50,50,200), thickness=2, circle_radius=2)
                             )
# בדיקה פתיחת מצלמה📷

cap = cv2.VideoCapture(0)
with mp_holistic.Holistic(min_detection_confidence = 0.5, min_tracking_confidence = 0.5) as holistic_model:
    while cap.isOpened():
        _, frame = cap.read()
        img, results = mediapipe_detection(frame, holistic_model)
        holistic_drawing(img, results)
        cv2.imshow("OpenCV Cam feed", img)
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
cap.release()
cv2.destroyAllWindows()
cv2.waitKey(1)
                             
                             
                             
    






